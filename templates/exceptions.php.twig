{#
    This file is part of the CloudStack Client Generator.

    (c) Quentin Pleplé <quentin.pleple@gmail.com>
    (c) Aaron Hurt <ahurt@anbcs.com>
    (c) Nathan Johnson <nathan@nathanjohnson.info>
    (c) Daniel Carbone <daniel.p.carbone@gmail.com>
    (c) Bogdan Gabor <bgabor@ena.com>

    For the full copyright and license information, please view the LICENSE
    file that was distributed with this source code.
#}
<?php

{{ namespace_stmt() }}

use GuzzleHttp\Exception\TransferException;

/*
 * This file was autogenerated as part of the CloudStack PHP Client.
 *
 * Date Generated: {{ now('Y-m-d') }}
 * API Version: {{ capabilities.capability.cloudstackversion }}
 *
 * (c) Quentin Pleplé {{ '<quentin.pleple@gmail.com>'|raw }}
 * (c) Aaron Hurt {{ '<ahurt@anbcs.com>'|raw }}
 * (c) Nathan Johnson {{ '<nathan@nathanjohnson.org>'|raw }}
 * (c) Daniel Carbone {{ '<daniel.p.carbone@gmail.com>'|raw }}
 * (c) Bogdan Gabor {{ '<bgabor@ena.com>'|raw }}
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * Interface CloudStackException
 */
interface CloudStackException extends \Throwable
{
    /**
     * Must return true ONLY if the request failed validation prior to execution
     *
     * @return bool;
     */
    public function isRequestError(): bool;

    /**
     * Must return true ONLY if the request failed due to a transport issue
     *
     * @return bool
     */
    public function isTransportError(): bool;

    /**
     * Must return true ONLY if the response from CloudStack was unable to be unmarshalled
     *
     * @return bool
     */
    public function isResponseError(): bool;

    /**
     * Must return true ONLY if CloudStack returned a non-200 response to the request
     *
     * @return bool
     */
    public function isAPIError(): bool;

    /**
     * Must return a clone of the originating request instance
     *
     * @return {{ namespace_path('CloudStackRequest\\CloudStackRequestInterface', true) }}
     */
    public function getRequest(): CloudStackRequest\CloudStackRequestInterface;
}

/**
 * Class AbstractCloudStackException
 */
abstract class AbstractCloudStackException extends \RuntimeException implements CloudStackException
{
    /** @var {{ namespace_path('CloudStackRequest\\CloudStackRequestInterface', true) }} */
    private $request;

    /**
     * AbstractCloudStackException constructor
     * @param {{ namespace_path('CloudStackRequest\\CloudStackRequestInterface', true) }} $request
     * @param string $message
     * @param int $code
     * @param null|\Throwable $previous
     */
    public function __construct(CloudStackRequest\CloudStackRequestInterface $request, $message, $code = 0, ?\Throwable $previous = null)
    {
        $this->request = clone $request;
        parent::__construct($message, $code, $previous);
    }

    /**
     * @return {{ namespace_path('CloudStackRequest\\CloudStackRequestInterface', true) }}
     */
    public function getRequest(): CloudStackRequest\CloudStackRequestInterface
    {
        return $this->request;
    }

    /**
     * @return bool
     */
    public function isRequestError(): bool
    {
        return false;
    }

    /**
     * @return bool
     */
    public function isTransportError(): bool
    {
        return false;
    }

    /**
     * @return bool
     */
    public function isResponseError(): bool
    {
        return false;
    }

    /**
     * @return bool
     */
    public function isAPIError(): bool
    {
        return false;
    }
}

/**
 * CloudStackRequestException
 */
class CloudStackRequestException extends AbstractCloudStackException
{
    /** @var array */
    private $errors;

    /**
     * CloudStackRequestException constructor
     * @param {{ namespace_path('CloudStackRequest\\CloudStackRequestInterface', true) }} $request
     * @param array Error list
     * @param null|\Throwable $previous
     */
    public function __construct(CloudStackRequest\CloudStackRequestInterface $request, array $errors, ?\Throwable $previous = null)
    {
        $this->errors = $errors;
        parent::__construct($request, implode('; ', $errors), 400, $previous);
    }

    /**
     * @return bool
     */
    public function isRequestError(): bool
    {
        return true;
    }

    /**
     * @return array
     */
    public function getErrors(): array
    {
        return $this->errors;
    }
}

/**
 * CloudStackTransportException
 */
class CloudStackTransportException extends AbstractCloudStackException
{
    /**
     * CloudStackTransportException
     * @param {{ namespace_path('CloudStackRequest\\CloudStackRequestInterface', true) }} $request
     * @param \GuzzleHttp\Exception\TransferException $e
     */
    public function __construct(CloudStackRequest\CloudStackRequestInterface $request, TransferException $e)
    {
        parent::__construct($request, $e->getMessage(), $e->getCode(), $e);
    }

    /**
     * @return bool
     */
    public function isTransportError(): bool
    {
        return true;
    }
}

/**
 * CloudStackResponseException
 */
class CloudStackResponseException extends AbstractCloudStackException
{
    /**
     * CloudStackResponseException
     * @param {{ namespace_path('CloudStackRequest\\CloudStackRequestInterface', true) }} $request
     * @param string $message
     * @param int $code
     * @param null|\Throwable $e
     */
    public function __construct(CloudStackRequest\CloudStackRequestInterface $request, string $message = '', int $code = 0, ?\Throwable $e = null)
    {
        parent::__construct($request, $message, $code, $e);
    }

    /**
     * @return bool
     */
    public function isResponseError(): bool
    {
        return true;
    }
}

/**
 * CloudStackAPIException
 *
 * This exception should only be thrown when CloudStack itself returns an error
 */
class CloudStackAPIException extends AbstractCloudStackException
{
    /** @var string [] */
    private $uuidList = [];
    /** @var int */
    private $errorCode = 0;
    /** @var int */
    private $csErrorCode = 0;
    /** @var string */
    private $errorText = 'Unknown Error';

    /**
     * CloudStackAPIException Constructor
     * @param {{ namespace_path('CloudStackRequest\\CloudStackRequestInterface', true) }} $request Originating request
     * @param array $response JSON-decoded error response from CloudStack
     * @param \Throwable $previous Previous exception, if any
     */
    public function __construct(CloudStackRequest\CloudStackRequestInterface $request, array $response, \Throwable $previous = null)
    {
        if (isset($response['uuidlist']) && is_array($response['uuidlist'])) {
            $this->uuidList = $response['uuidlist'];
        }
        $this->errorCode = (int)($response['errorcode'] ?? 0);
        $this->csErrorCode = (int)($response['cserrorcode'] ?? 0);
        $this->errorText = (string)($response['errortext'] ?? '');
        parent::__construct(
            $request,
            sprintf(
                'Code: %d; CloudStack Code: %d; Message: %s',
                $this->errorCode,
                $this->csErrorCode,
                $this->errorText
            ),
            $this->errorCode,
            $previous
        );
    }

    /**
     * @return bool
     */
    public function isAPIError(): bool
    {
        return true;
    }

    /**
     * @return string[]
     */
    public function getUUIDList(): array
    {
        return $this->uuidList;
    }

    /**
     * @return int
     */
    public function getErrorCode(): int
    {
        return $this->errorCode;
    }

    /**
     * @return int
     */
    public function getCSErrorCode(): int
    {
        return $this->csErrorCode;
    }

    /**
     * @return string
     */
    public function getErrorText(): string
    {
        return $this->errorText;
    }
}