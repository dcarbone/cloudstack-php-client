{#
    This file is part of the CloudStack Client Generator.

    (c) Quentin Pleplé <quentin.pleple@gmail.com>
    (c) Aaron Hurt <ahurt@anbcs.com>
    (c) Nathan Johnson <nathan@nathanjohnson.info>
    (c) Daniel Carbone <daniel.p.carbone@gmail.com>
    (c) Bogdan Gabor <bgabor@ena.com>

    For the full copyright and license information, please view the LICENSE
    file that was distributed with this source code.
#}
<?php

{{ namespace_stmt('CloudStackRequest') }}

/*
 * This file was autogenerated as part of the CloudStack PHP Client.
 *
 * Date Generated: {{ now('Y-m-d') }}
 * API Version: {{ capabilities.capability.cloudstackversion }}
 *
 * (c) Quentin Pleplé {{ '<quentin.pleple@gmail.com>'|raw }}
 * (c) Aaron Hurt {{ '<ahurt@anbcs.com>'|raw }}
 * (c) Nathan Johnson {{ '<nathan@nathanjohnson.org>'|raw }}
 * (c) Daniel Carbone {{ '<daniel.p.carbone@gmail.com>'|raw }}
 * (c) Bogdan Gabor {{ '<bgabor@ena.com>'|raw }}
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
{# TODO: I do not like how much junk I'm storing in the models.  Find cleaner way? #}
/**
 * Interface CloudStackRequestInterface
 * @package {{ namespace_path('CloudStackRequestInterface', true) }}
 */
interface CloudStackRequestInterface extends \JsonSerializable
{
    /**
     * Must return the name of the command request property
     * @return string
     */
    public function getCloudStackCommandParameter(): string;

    /**
     * Must return the upstream command name
     * @return string
     */
    public function getCloudStackCommandName(): string;

    /**
     * Must return fully qualified class name of response model
     * @return string
     */
    public function getCloudStackResponseModel(): string;

    /**
     * Must return boolean state of request validity
     * @return bool
     */
    public function isRequestValid(): bool;

    /**
     * Must return an array of [param => value] that can be directly serialized for consumption by CloudStack
     * @return array
     */
    public function toUrlParams(): array;
}

/**
 * Indicates this is an "api" command request model
 * Interface CloudStackApiCommandRequest
 * @package {{ namespace_path('CloudStackApiCommandRequest', true) }}
 */
interface CloudStackApiCommandRequest
{

}

/**
 * Indicates this is a "console" command request model
 * Interface CloudStackConsoleCommandRequest
 * @package {{ namespace_path('CloudStackConsoleCommandRequest', true) }}
 */
interface CloudStackConsoleCommandRequest
{

}

/**
 * Indicates this is a synchronous request
 * Interface CloudStackSynchronousRequest
 * @package {{ namespace_path('CloudStackConsoleCommandRequest', true) }}
 */
interface CloudStackSynchronousRequest
{

}

/**
 * Indicates this is an asynchronous request
 * Interface CloudStackAsynchronousRequest
 * @package {{ namespace_path('CloudStackAsynchronousRequest', true) }}
 */
interface CloudStackAsynchronousRequest
{
    /**
     * @return string
     */
    public function getCloudStackEventType(): string;
}

/**
 * Indicates this is a List request
 * Interface CloudStackListRequest
 * @package {{ namespace_path('CloudStackListRequest', true) }}
 */
interface CloudStackListRequest
{

}

/**
 * Indicates this request can have its response cached
 * Interface CloudStackCacheableRequest
 * @package {{ namespace_path('CloudStackCacheableRequest', true) }}
 */
interface CloudStackCacheableRequest
{
    /**
     * Specifies that the cache may not be used for this request
     */
    public function disallowCachedResponse(): void;

    /**
     * If true, the client will attempt to pull the response for this request from cache
     * @return bool
     */
    public function isCachedResponseAllowed(): bool;

    /**
     * Specifies that the response from this request may not be put into the cache
     */
    public function disallowResponseCaching(): void;

    /**
     * If true, the response from this request may not be cached.
     * @return bool
     */
    public function isResponseCachingAllowed(): bool;
}
